{
  "rules": {
    "userInfo": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "name": {
          "firstName": {
            ".validate": "newData.isString() && newData.val().length <= 30"
          },
          "lastName": {
            ".validate": "newData.isString() && newData.val().length <= 30"
          }
        },
        "address": {
          "city": {
            ".validate": "newData.isString() && newData.val().length <= 30"
          },
          "street": {
            ".validate": "newData.isString() && newData.val().length <= 80"
          }
        },
        "dateOfBirth": {
          "date": {
            ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 31"
          },
          "month": {
            ".validate": "newData.isNumber() && newData.val() >= 1  && newData.val() <= 12"
          },
          "year": {
            ".validate": "newData.isNumber() && newData.val() >= 1900  && newData.val() <= 2020"
          }
        }
      }
    },
    "userOffices": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "userInterfaceInfo": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "numberOfNotifications": {
          ".read": "root.child('userOffices/' + auth.uid).exists()",
          ".write": "root.child('userOffices/' + auth.uid).exists()",
          ".validate": "newData.isNumber() && newData.val() >= 0"
        }
      }
    },
    "userContactedOffices": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "$oid": {
          ".write": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
          "status": {
            ".validate": "newData.val() === 'awaitsVerification' || newData.val() === 'accessed' || newData.val() === 'blocked'"
          }
        }
      }
    },
    "userAppointments": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "$aid": {
          ".write": "root.child('officeAdminInfo/' + data.child('officeId').val() + '/users/' + auth.uid).exists()"
        }
      }
    },
    "userNotifications": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "$nid": {
          ".write": "root.child('officeAdminInfo/' + newData.child('sender').val() + '/users/' + auth.uid).exists() && root.child('userContactedOffices/' + $uid + '/' + newData.child('sender').val()).exists()"
        }
      }
    },
    "officeFullInfo": {
      "$oid": {
        ".read": true,
        ".write": "!data.exists() || root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).val() === 'admin'"
      }
    },
    "officeSearchInfo": {
      ".read": true,
      "$oid": {
        ".write": "!data.exists() || root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).val() === 'admin'"
      }
    },
    "officeAdminInfo": {
      "$oid": {
        ".read": "data.child('users/' + auth.uid).val() === 'admin'",
        ".write": "!data.exists() || data.child('users/' + auth.uid).val() === 'admin'"
      }
    },
    "officePatients": {
      "$oid": {
        ".read": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
        ".write": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
        "$uid": {
          ".write": "data.exists() && $uid === auth.uid || !data.exists() && root.child('officeFullInfo/' + $oid + '/manualConfirmation').val() === false"
        }
      }
    },
    "officeBlockedPatients": {
      "$oid": {
        ".read": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
        ".write": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
        "$uid": {
          ".write": "data.exists() && $uid === auth.uid"
        }
      }
    },
    // Doesn't validate if email is verified. Couldn't get it working.
    "officePatientsToVerify": {
      "$oid": {
        ".read": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
        ".write": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
        "$uid": {
          ".write": "$uid === auth.uid && !root.child('officePatients/' + $oid + '/' + $uid).exists() && !root.child('officeBlockedPatients/' + $oid + '/' + $uid).exists()"
        }
      }
    },
    "officeHolidays": {
      "$oid": {
        ".read": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).val() === 'admin'",
        ".write": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).val() === 'admin'"
      }
    },
    "officeInterfaceInfo": {
      "$oid": {
        ".read": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
        ".write": "!data.exists() || root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).val() === 'admin'",
        // TODO: It's hackable. Moving the logic to backend would solve the issue. Low priority
        "patientsToVerify": {
          ".read": "root.child('officePatientsToVerify/' + $oid + '/' + auth.uid).exists() || root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
          ".write": "!data.exists() || root.child('officePatientsToVerify/' + $oid + '/' + auth.uid).exists() || root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
          ".validate": "newData.isNumber() && newData.val() >= 0"
        }
      }
    },
    "officeCredits": {
      "$oid": {
        ".write": "!data.exists() && newData.isNumber() && newData.val() == 400"
      }
    },
    "generatorInfo": {
      "$oid": {
        ".read": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
        ".write": "!data.exists() || root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).val() === 'admin'"
      }
    },
    // TODO: Limit to number of appointments is not yet enforced, requires backend. Low priority
    "appointmentsPublic": {
      ".read": true,
      "$oid": {
        ".write": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
        "$aid": {
          ".write": "auth !== null && auth.token.email_verified == true && ((data.val() === true && (root.child('officeFullInfo/' + $oid + '/manualConfirmation').val() === false || root.child('officePatients/' + $oid + '/' + auth.uid).exists())) || data.val() === false && root.child('appointmentsPrivate/' + $oid + '/' + $aid + '/patient').val() === auth.uid)"
        }
      }
    },
    "appointmentsPrivate": {
      "$oid": {
        ".read": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
        ".write": "root.child('officeAdminInfo/' + $oid + '/users/' + auth.uid).exists()",
        "$aid": {
          ".write": "auth !== null && ((!data.exists() && auth.token.email_verified == true && (root.child('officeFullInfo/' + $oid + '/manualConfirmation').val() === false || root.child('officePatients/' + $oid + '/' + auth.uid).exists())) || data.child('patient').val() === auth.uid)"
        }
      }
    },
    "issues": {
      "$iid": {
        ".read": false,
        ".write": "root.child('officeAdminInfo/' + newData.child('officeId').val() + '/users/' + auth.uid).exists()",
        "message": {
          ".validate": "newData.isString() && newData.val().length <= 2000"
        }
      }
    },
    "docInfoQuestions": {
      ".read": false,
      ".write": true,
      "$pushId": {
        "email": {
          ".validate": "newData.isString()"
        },
        "message": {
          ".validate": "newData.isString() && newData.val().length <= 2000"
        }
      }
    }
  }
}