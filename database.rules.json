{
  "rules": {
    "taskQueue": {
      ".read": "auth.uid === 'my-service-worker'",
      ".write": "auth.uid === 'my-service-worker'",
      "holidayAdditions": {
        "$oid": {
          ".write": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
          "$hid": {
            ".validate": "newData.child('endAt').isNumber()"
          }
        }
      },
      "holidayDeletions": {
        "$oid": {
          ".write": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
          "$hid": {
            ".validate": "newData.isNumber()"
          }
        }
      },
      "photoDeletion": {
        "$oid": {
          ".write": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
          "$iid": {
            ".validate": "newData.isBoolean()"
          }
        }
      },
      "indexUpdates": {
        "$oid": {
          ".write": "!data.exists() || root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()"
        }
      }
    },
    "userInfo": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "name": {
          "firstName": {
            ".validate": "newData.isString() && newData.val().length <= 30"
          },
          "lastName": {
            ".validate": "newData.isString() && newData.val().length <= 30"
          }
        },
        "address": {
          "city": {
            ".validate": "newData.isString() && newData.val().length <= 30"
          },
          "street": {
            ".validate": "newData.isString() && newData.val().length <= 80"
          }
        },
        "dateOfBirth": {
          "date": {
            ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 31"
          },
          "month": {
            ".validate": "newData.isNumber() && newData.val() >= 1  && newData.val() <= 12"
          },
          "year": {
            ".validate": "newData.isNumber() && newData.val() >= 1900  && newData.val() <= 2020"
          }
        },
        "sex": {
          ".validate": "newData.isString() && (newData.val() === 'female' || newData.val() === 'male')"
        }
      }
    },
    "userOffices": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid"
      }
    },
    "userInterfaceInfo": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "numberOfNotifications": {
          // Only doctors are allowed to increment notification count. Hackable but sufficent for now
          ".read": "auth.uid === 'my-service-worker' || root.child('userOffices/' + auth.uid).exists()",
          ".write": "auth.uid === 'my-service-worker' || root.child('userOffices/' + auth.uid).exists()",
          ".validate": "newData.isNumber() && newData.val() >= 0"
        }
      }
    },
    "userContactedOffices": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "$oid": {
          ".write": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
          "status": {
            ".validate": "newData.val() === 'awaitsVerification' || newData.val() === 'accessed' || newData.val() === 'blocked'"
          },
          "booked" :{
            // TODO: security flaw - user can write false and fill all the booking times. Solvable by denying access and allow
            // time deleting only by server, which checks there really aren't any booking times at that doctor by the user
            ".write": "auth.uid === 'my-service-worker'",
            ".validate": "newData.isBoolean()"
          }
        }
      }
    },
    "userAppointments": {
      ".write": "auth.uid === 'my-service-worker'",
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "$aid": {
          ".write": "root.child('officePermissions/' + data.child('officeId').val() + '/' + auth.uid + '/admin').exists()"
        }
      }
    },
    "userNotifications": {
      ".write": "auth.uid === 'my-service-worker'",
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "$nid": {
          ".write": "root.child('officePermissions/' + newData.child('sender').val() + '/' + auth.uid + '/admin').exists() && root.child('userContactedOffices/' + $uid + '/' + newData.child('sender').val()).exists()"
        }
      }
    },
    "officeFullInfo": {
      "$oid": {
        ".read": true,
        ".write": "(!data.exists() && auth.token.email_verified == true) || root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        "holidays": {
          ".write": "auth.uid === 'my-service-worker'"
        },
        "lastGeneratedDate": {
          ".write": "auth.uid === 'my-service-worker'"
        }
      }
    },
    "officeSearchInfo": {
      ".read": true,
      "$oid": {
        ".write": "(!data.exists() && auth.token.email_verified == true) || root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()"
      }
    },
    "officePermissions": {
      "$oid": {
        ".read": "data.child(auth.uid + '/admin').exists()",
        ".write": "(!data.exists() && auth.token.email_verified == true) || data.child(auth.uid + '/admin').exists()"
      }
    },
    "officePatients": {
      "$oid": {
        ".read": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        ".write": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        "$uid": {
          ".write": "data.exists() && $uid === auth.uid || !data.exists() && root.child('officeFullInfo/' + $oid + '/manualConfirmation').val() === false"
        }
      }
    },
    "officeBlockedPatients": {
      "$oid": {
        ".read": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        ".write": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        "$uid": {
          ".write": "data.exists() && $uid === auth.uid"
        }
      }
    },
    // Doesn't validate if email is verified. Couldn't get it working.
    "officePatientsToVerify": {
      "$oid": {
        ".read": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        ".write": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        "$uid": {
          ".write": "$uid === auth.uid && !root.child('officePatients/' + $oid + '/' + $uid).exists() && !root.child('officeBlockedPatients/' + $oid + '/' + $uid).exists()"
        }
      }
    },
    "officeHolidays": {
      "$oid": {
        ".read": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        ".write": "auth.uid === 'my-service-worker' || root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        "status": {
          ".validate": "newData.isString() && (newData.val() == 'awaitsDeletion' || newData.val() == 'processed' || newData.val() == 'awaitsAddition')"
        }
      }
    },
    "officeInterfaceInfo": {
      "$oid": {
        ".read": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        ".write": "(!data.exists() && auth.token.email_verified == true) || root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        // TODO: It's hackable. Moving the logic to backend would solve the issue. Low priority
        "patientsToVerify": {
          ".read": "root.child('officePatientsToVerify/' + $oid + '/' + auth.uid).exists() || root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
          ".write": "!data.exists() || root.child('officePatientsToVerify/' + $oid + '/' + auth.uid).exists() || root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
          ".validate": "newData.isNumber() && newData.val() >= 0"
        }
      }
    },
    // TODO: Bug fix - unauthorized user might activate onlineBooking.
    "generatorInfo": {
      ".read": "auth.uid === 'my-service-worker'",
      "$oid": {
        ".read": "root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        ".write": "(!data.exists() && auth.token.email_verified == true) || root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        "officeHours": {
          "dayIndex": {
            "available": {
              ".validate": "newData.isBoolean()"
            },
            "hours": {
              ".validate": "newData.isString()"
            }
          }
        },
        "visitLength": {
          ".validate": "newData.isNumber() && newData.val() <= 360 && newData.val() >= 1"
        },
        "numberOfDays": {
          ".validate": "newData.isNumber() && newData.val() <= 360 && newData.val() >= 7"
        },
        "lastGeneratedDate": {
          ".write": "auth.uid === 'my-service-worker'",
          "year": {
            ".validate": "newData.isNumber() && newData.val() >= 2017"
          },
          "month": {
            ".validate": "newData.isNumber()"
          },
          "date": {
            ".validate": "newData.isNumber() && newData.val() <= 31 && newData.val() > 0"
          }
        },
        "holidays": {
          ".write": "auth.uid === 'my-service-worker'",
          "$hId": {
            ".validate": "newData.isNumber()"
          }
        }
      }
    },
    // TODO: Limit to number of appointments is not yet enforced, requires backend. Low priority
    "appointmentsPublic": {
      ".read": true,
      "$oid": {
        ".write": "auth.uid === 'my-service-worker' || root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        "$aid": {
          ".write": "auth !== null && auth.token.email_verified == true && ((data.val() === true && (root.child('officeFullInfo/' + $oid + '/manualConfirmation').val() === false || root.child('officePatients/' + $oid + '/' + auth.uid).exists())) || data.val() === false && root.child('appointmentsPrivate/' + $oid + '/' + $aid + '/patient').val() === auth.uid)"
        }
      }
    },
    "appointmentsPrivate": {
      "$oid": {
        ".read": "auth.uid === 'my-service-worker' || root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        ".write": "auth.uid === 'my-service-worker' || root.child('officePermissions/' + $oid + '/' + auth.uid + '/admin').exists()",
        "$aid": {
          ".write": "auth !== null && ((!data.exists() && auth.token.email_verified == true && (root.child('officeFullInfo/' + $oid + '/manualConfirmation').val() === false || root.child('officePatients/' + $oid + '/' + auth.uid).exists())) || data.child('patient').val() === auth.uid)",
          "source": {
            ".validate": "newData.isString() && (newData.val() == 'online' || newData.val() == 'calendar' || newData.val() == 'waitingRoom')"
          }
        }
      }
    },
    "issues": {
      "$iid": {
        ".read": false,
        ".write": "root.child('officePermissions/' + newData.child('officeId').val() + '/' + auth.uid + '/admin').exists()",
        "message": {
          ".validate": "newData.isString() && newData.val().length <= 2000"
        }
      }
    },
    "docInfoQuestions": {
      ".read": false,
      ".write": true,
      "$pushId": {
        "email": {
          ".validate": "newData.isString()"
        },
        "message": {
          ".validate": "newData.isString() && newData.val().length <= 2000"
        }
      }
    },
    "docInfoVisitors": {
      ".read": false,
      ".write": true
    },
    "newWebQuestions": {
      ".read": false,
      ".write": true,
      "$pushId": {
        "contact": {
          ".validate": "newData.isString()"
        },
        "message": {
          ".validate": "newData.isString() && newData.val().length <= 2000"
        }
      }
    }
  }
}